Mono.Linq.Expressions
--

Mono.Linq.Expressions is an helper library to complement the
System.Linq.Expressions namespace. It is known to work on both
Mono 2.8 and .net 4.0.

API
--

static class CSharp:

	string ToCSharpCode (Expression):

		Returns a string containing the C# representation of
		the expression.

static class FluentExtensions:

	Provides extension methods to ease the creation of expression trees.

	For instance, instead of writing:

		var field = Expression.Field (
			Expression.Convert (parameter, typeof (string)),
			"Length");

	You could write:

		var field = parameter.Convert (typeof (string)).Field ("Length");

abstract class CustomExpression:

	Base class for custom expressions.

	public abstract Expression Accept (CustomExpressionVisitor visitor):

		Accept a custom visitor, extending the standard ExpressionVisitor
		with support for custom expressions.

abstract class ExpressionWriter:

	Provides a base class for pretty print specific language, such as 
	CSharpWriter used by CSharp.ToCSharpCode().

class DoWhileExpression : CustomExpression:

	A `do {} while (condition);` statement.

class ForEachExpression : CustomExpression:

	A `foreach (var item in iterable) {}` statement.

class ForExpression : CustomExpression:

	A `for (initializer; condition; increment) {}` statement.

class UsingExpression : CustomExpression:

	A `using (disposable) {}` statement.

class WhileExpression : CustomExpression:

	A `while (condition) {}` statement.

class PredicateBuilder:

	Provides a way to combine lambda predicates using boolean operators.
	Expressions are rewritten to keep the predicates simple and understanble
	by LINQ providers.

	For instance:

		Expression<Func<User, bool>> isOver18 = u => u.Age > 18;
		Expression<Func<User, bool>> isFemale = u => u.Gender == Gender.Female;

		Expression<Func<User, bool>> femalesOver18 = isOver18.AndAlso (isFemale);

		// >> femalesOver18.ToString ()
		// u => u.Age > 18 && u.Gender == Gender.Female

	Methods:

		public static Expression<Func<T, bool>> OrElse<T> (this Expression<Func<T, bool>> self, Expression<Func<T, bool>> expression)

		public static Expression<Func<T, bool>> AndAlso<T> (this Expression<Func<T, bool>> self, Expression<Func<T, bool>> expression)

		public static Expression<Func<T, bool>> Not<T> (this Expression<Func<T, bool>> self)

